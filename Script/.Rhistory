source('~/steam/Script/auc.R')
histogram(~gbm.probs$PS|testData$Class,xlab="Probability of Poor Segmentation")
gbm.ROC
gbm.ROC$auc
source('~/steam/Script/auc.R')
prSummary(testX, lev = levels(testData$Class))
prSummary(testData, lev = levels(testData$Class))
source('~/steam/Script/auc.R')
source('~/steam/Script/auc2.R')
source('~/steam/Script/auc2.R')
source('~/steam/Script/auc2.R')
View(data.train)
result.roc
x = data.train[,-5]
View(x)
source('~/steam/Script/auc3.R')
library(caret)
library (ROCR)
data(iris)
iris <- iris[iris$Species == "virginica" | iris$Species == "versicolor", ]
iris$Species <- factor(iris$Species)  # setosa should be removed from factor
iris$Species
View(data.test)
library(caret)
library(ROCR)
data(iris)
iris <- iris[iris$Species == "virginica" | iris$Species == "versicolor", ]
iris$Species <- factor(iris$Species)  # setosa should be removed from factor
samples <- sample(NROW(iris), NROW(iris) * .7)
data.train <- iris[samples, ]
data.test <- iris[-samples, ]
forest.model <- train(Species ~., data.train)
y <- data.test$Species # logical array of positive / negative cases
predictions <- predict(forest.model, data.test, type="prob") # Prediction
pred <- prediction(predictions, y);
# Recall-Precision curve
RP.perf <- performance(pred, "prec", "rec");
plot (RP.perf);
